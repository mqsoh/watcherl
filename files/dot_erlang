% This file was generated from the README.md.
case init:get_argument(watcherl_on) of
    {ok, _} ->
        io:format("~nwatcherl: Starting the compiler and BEAM reloader.~n"),
        Compiler_options = begin
            Given_options = os:getenv("WATCHERL_COMPILER_OPTIONS", "[verbose, report, {outdir, \"ebin\"}]") ++ ".",
            {ok, Tokens, _End_location} = erl_scan:string(Given_options),
            {ok, Expressions} = erl_parse:parse_exprs(Tokens),
            {value, Value, _New_bindings} = erl_eval:exprs(Expressions, []),
            Value
        end,
        register(watcherl_compiler, spawn(fun F() ->
            receive
                File_name ->
                    case compile:file(File_name, Compiler_options) of
                        error ->
                            io:format("~nwatcherl: Unspecified error compiling: ~s~n", [File_name]);
                        {error, Errors, Warnings} ->
                            io:format("~nwatcherl: Failed compiling ~s with errors (~p) and warnings (~p).~n", [File_name, Errors, Warnings]);
                        _ ->
                            io:format("~nwatcherl: Compiled: ~s~n", [File_name])
                    end
            end,
            F()
        end))
        ,
        register(watcherl_reloader, spawn(fun F() ->
            receive
                Module_name ->
                    io:format("~nwatcherl: Reloading: ~s~n", [Module_name]),
                    Module = list_to_atom(Module_name),
                    code:purge(Module),
                    code:load_file(Module)
            end,
            F()
        end))
        ,
        case file:list_dir("src") of
            {ok, Initial_files} ->
                lists:foreach(fun (Filename) ->
                                watcherl_compiler ! "src/" ++ Filename
                              end,
                              Initial_files);
            _ -> ok
        end
        ;
    _ -> ok
end.